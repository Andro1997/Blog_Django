Получив GET- или POST-запрос, Django извлекает из него всю информацию и в структурированном виде помещает в объект HttpRequest. 
Переменную, которая хранит этот объект, обычно называют request.

Именно переменная request передаётся как обязательный аргумент во view-функцию:
def index(request):
    # какой-то код
    
Объектом в языках программирования называют набор свойств и методов, каждый из которых имеет своё имя (ключ). Чтобы получить значение по имени (по ключу), имя свойства или метода записывают через точку после имени объекта.
Значением свойства может быть строка, функция (такое свойство называется метод), другой объект, коллекция, и вообще данные любого типа.
Название метода запроса — GET, POST или другой — записано в объекте HttpRequest и доступно по ключу method.
Если нужно узнать тип полученного запроса — обращаемся к свойству method объекта request. Получить значение свойства можно вот таким выражением: request.method.
def check_method(request):
    return request.method 
# функция check_method() вернёт название метода запроса: 
# например — GET или POST
Информация, переданная с запросом, сохраняется в словаре request.GET или request.POST, в зависимости от типа запроса.
Можно сказать так: «у объекта request есть свойство POST, в нём хранится словарь с информацией из запроса».
# В запросе на сервер переданы логин и email пользователя,
# Django сложил информацию в словарь request.POST
{
    'login' : 'Tony',
    'mail' : 'ironman@stark.com'
}

# view-функция узнаёт тип запроса 
# и достаёт из свойства request.POST данные пользователя:

def index(request):
    if request.method == 'POST':
        new_login = request.POST['login']  # new_login = 'Tony'
        new_mail = request.POST['mail']  # new_mail = 'ironman@stark.com'
        
Сходным образом выглядит и словарь request.GET.
Если пользователь Tony отправит нам информацию методом GET, то его данные будут переданы прямо в строке URL, 
и в адресной строке браузера запрос будет выглядеть так: http://my-blog.praktikum.yandex.ru?login=Tony&mail=ironman@stark.com
Дальнейший процесс обработки будет точно такой же, как в случае POST-запроса

# теперь везде GET, но обработка точно такая же
# В GET-запросе на сервер переданы логин и email пользователя,
# Django сложил информацию в словарь request.GET

{
    'login' : 'Tony',
    'mail' : 'ironman@stark.com'
}

# view-функция узнаёт тип запроса 
# и достаёт из свойства request.GET данные пользователя:

def index(request):
    if request.method == 'GET':
        new_login = request.GET['login']  # new_login = 'Tony'
        new_mail = request.GET['mail']  # new_mail = 'ironman@stark.com'
Обычно пользователи передают данные на сервер через «веб-формы» — специальные HTML-объекты, 
отправляющие информацию пользователя на сервер.


Поля для ввода текста, чекбоксы-галочки, календари для выбора даты, кнопки выбора, выпадающие списки — всё это элементы форм.
Данные об их состоянии отправляются на сервер (обычно в виде POST-запроса) после нажатия на кнопку типа submit.
