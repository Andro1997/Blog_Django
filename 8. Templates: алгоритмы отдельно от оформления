8. Templates: алгоритмы отдельно от оформления
Пока что во всех view-функциях было минимальное количество HTML-кода. 
Однако назвать «готовым продуктом» те страницы, что у нас получались, язык не поворачивается: даже самая простая веб-страница обычно содержит десятки строк кода.
Можно хранить HTML-код прямо внутри view-функций, но очень скоро такой код станет невозможно читать и поддерживать.
Всё выглядит компактно, пока на главной странице блога отображается лишь заголовок:

from django.http import HttpResponse

def index(request):
    return HttpResponse('<h1>Добро пожаловать!</h1>')
Но как только вы добавите на страницу оглавление сайта и краткое описание каждого раздела, код разрастётся:
from django.http import HttpResponse
    
def index(request):
    return HttpResponse('<h1>Добро пожаловать!</h1><p>Вы можете попробовать' +
        ' ввести в адресную строку следующие пути:</p><ul><pre><li>' +
        ' articles<ul><li>/dashboard - отображает статьи за текущий год</li>' +
        ' <li>/dashboard/int:year - отображает статьи за указанный год </li>' +
        ' <li>/int:id - отображает статью с указанным id</li><li>/str:user - ' +
        ' отображает статьи указанного пользователя</li><li>/tag/str:tag - отображает' +
        ' статьи с указанным тэгом</li></ul></li><li> accounts<ul><li>/friends/str:user' +
        ' - отображает друзей указанного пользователя</li></ul></li></pre></ul>')
        
Гораздо удобнее хранить HTML-код в отдельных файлах, подключая их по необходимости. 
Этим управляет механизм Templates (англ. «шаблоны»)
Сами по себе шаблоны — это HTML-файлы, их принято размещать в папке templates/ в головной директории приложения.
В директории templates мы будем хранить шаблоны страниц, разделяя их в соответствии с принадлежностью: шаблоны для Articles App будут лежать в директории templates/articles, а шаблоны для Accounts App — в templates/accounts. Шаблоны, не относящиеся к приложениям, будем складывать в корень папки templates


В самом простом случае шаблон представляет собой обычный HTML-файл
<!DOCTYPE html>
<html lang="ru">
<head>
        <meta charset="UTF-8">
        <title>My Praktikum Blog</title>
</head>
<body>
        <h1>Это глупый шаблон, он ничего не умеет</h1>
</body>
</html>

Механизм Templates подключает нужный шаблон и передаёт в него информацию, необходимую для наполнения и отрисовки страницы.
За это отвечает специальная функция Django render() (от англ. render, «отрисовать»).
При вызове функции render() ей передаётся:
Объект request, в котором содержится информация из запроса (обязательно).
Путь к шаблону, на основе которого надо создать страницу (обязательно).
Словарь context (необязательный параметр): содержит информацию, которую необходимо вывести в шаблон.
render(request, 'templates/index.html', context)
Словарь context — это любые данные, которые разработчик передаёт в шаблон для отображения на странице.
Например, для генерации страницы статьи нам потребуется передать в шаблон такой набор данных: 
заголовок статьи, дата публикации, имя автора, теги и полный текст статьи.

context = {
    'title' : 'Как разобраться с Django и сохранить рассудок?', # заголовок статьи
    'date' : '23.09.2019', 
    'author' : 'Master Django', # эту статью могли бы написать вы
    'tags' : ['Django','Обучение','Здоровье','Отвага'],
    'fulltext' : 'Никак. <strong>Но это не точно.</strong>' # это короткая статья, вот её полный текст
}

Эти данные будут вставлены в шаблон, и готовая страница со статьёй будет отправлена пользователю.
Теперь view-функция будет возвращать не HTML-код, явно прописанный в 
HttpResponse (как было до сих пор), а результат работы функции render(): именно она сгенерирует страницу из нужного шаблона.
from django.shortcuts import render
from django.http import HttpResponse

def article(request):
    # раньше мы делали так:
    # return HttpResponse('<h1>Это html-код ответа</h1>')

    # а теперь мы будем делать удобно и правильно:
    # вызываем функцию render()
    # готовим контент, который надо вывести на странице
    context = {
        'title' : 'Как разобраться с Django и сохранить рассудок?', # заголовок статьи
        'date' : '23.09.2019', 
        'author' : 'Master Django', # эту статью могли бы написать вы
        'tags' : ['Django','Обучение','Здоровье','Отвага'],
        'fulltext' : 'Никак. <strong>Но это не точно.</strong>' # это короткая статья, вот её полный текст
    }    
    
    # вызываем функцию render, 
    # указываем, из какого шаблона хотим сгенерировать страницу, 
    # передаём ей context
    # и возвращаем результат работы render() пользователю
    return render(request, 'templates/article.html', context) 
    # радуемся аккуратному коду
