Чтобы заставить сервер что-то делать, нужно отправить ему запрос. Например, обратиться к нему по определённому адресу.
Два самых распространённых типа запросов — это GET и POST.

GET-запросы применяют, когда в ответ нужно просто получить какую-нибудь страницу или информацию от сервера.
POST-запросами отправляют информацию на сервер — для сохранения или изменения данных.

Вы ежедневно отправляете сотни запросов из браузера на всевозможные сайты:

Всякий раз, когда вы открываете сайт, ваш браузер посылает GET-запрос на сервер — и тот возвращает браузеру запрашиваемую страницу.
Самый простой пример создания POST-запроса — это отправка данных через поле ввода на сайте. 
Так, например, браузер делает POST-запрос, когда вы ищете что-то в Яндексе или заказываете товары в интернет-магазине.

GET- и POST-запросы могут содержать дополнительные данные для корректной работы view-функций и генерации правильного ответа.
Например, если вы безо всяких дополнительных данных запросите главную страницу Яндекса — она, конечно же, откроется. 
Но если с запросом будет передана дополнительная информация о вашем аккаунте — Яндекс вас «узнает» и предоставит доступ к вашей почте, к вашему Яндекс.Практикуму и к другим сервисам, требующим авторизации.

POST-запросом можно передавать любые данные. Например, при заказе товара в интернет-магазине имя и 
адрес доставки будут отправлены как текст, номер карты — как число, а схема «куда доставить товар» — как файл.

Типичный случай отправки POST-запроса — регистрация на веб-сервисе.


В HTML-коде страницы это выглядит так:
<!-- в форме три поля ввода: два текстовых и кнопка отправки POST-запроса -->

<form method="post"><!-- здесь сказано, какой метод применять при отправке: POST-->
    <div class="userdata">
        <label class="label">Имя</label>
        <input type="text" name="login">
        <label class="label">Email</label>
        <input type="email" name="mail">
    </div>
    <input type="submit" value="Регистрируюсь">
    
В первой строке запроса — название метода, здесь это POST. 
Далее указан путь, по которому отправлен запрос — /, это обращение к главной странице сайта. 
И завершает первую строчку версия протокола — HTTP/1.0.
Отправленные через форму данные приходят на сервер в виде пар "имя=значение". 
Таких пар бывает много, друг от друга они отделяются амперсандом &: login=Tony&mail=ironman@stark.com

Имя берётся из HTML-разметки формы:

<input type="text" name="**login**"> <!-- имя задано в атрибуте name -->
Значение, соответствующее имени, пользователь вводит в форму сам.
</form>

GET-запрос всю информацию передаёт в URL.

У GET-запроса есть особенности:
через GET можно передавать буквы и цифры, но не файлы
не рекомендуется передавать приватную информацию 
(странно и небезопасно отправлять логин и пароль в открытом виде: http://her-majesty-secret-service.uk?login=JamesBond&password=007)
браузеры могут кешировать посещённые страницы: 
вы вчера посетили определённую страницу, сегодня снова зашли на неё — но браузер покажет вам её вчерашнее состояние

Но у GET есть и плюсы: полученная через GET-запрос страница имеет определённый веб-адрес, его можно сохранить в закладки 
или переслать кому-то. 
Это, скажем, страница с результатами поиска или с отфильтрованными данными. 
Со страницей, полученной через POST-запрос, этот номер не пройдёт.
